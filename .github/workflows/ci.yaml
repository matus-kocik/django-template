name: CI/CD for Django Template

# Trigger workflow on push and pull requests to main branch
on:
  push:
    branches:
      - main  # Run on push to the 'main' branch
  pull_request:
    branches:
      - main  # Run on pull requests targeting the 'main' branch

jobs:
  test:
    strategy:
      matrix:
        # Test against multiple Python versions for maximum compatibility
        python-version: ["3.12", "3.13"] # ["3.10", "3.11", "3.12", "3.13"]
        # Ensure cross-platform compatibility by testing on multiple OS
        os: [ubuntu-latest, macOS-latest, windows-latest]

    name: Run Tests and Linting on ${{ matrix.os }} with Python ${{ matrix.python-version }} # Name the job
    runs-on: ${{ matrix.os }}  # Use the operating system defined in the matrix

    services:
      db:
        image: postgres:15-alpine # Use PostgreSQL 15 with Alpine image for smaller size
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432

    steps:
      # Clone repository for access to codebase
      - name: Checkout Code
        uses: actions/checkout@v3  # Clone the repository

      # Configure Python environment with specified version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}  # Use the Python version defined in the matrix

      - name: Set Environment Variables
        run: |
          echo "DB_ENGINE=django.db.backends.postgresql" >> .env
          echo "DB_NAME=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DB_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env

      # Cache Poetry dependencies for faster builds
      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Set up project dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip to the latest version
          pip install poetry  # Install Poetry for dependency management
          poetry install --no-root  # Install dependencies without packaging the project

      # Run code quality checks
      - name: Run Pre-commit Hooks
        run: poetry run pre-commit run --all-files  # Run pre-commit hooks across the codebase

      # Check code formatting
      - name: Run Black (Check Mode)
        run: poetry run black --check .  # Ensure code follows Black formatting

      # Run code linting
      - name: Run Ruff
        run: poetry run ruff check .  # Run Ruff linter for code quality

      # Check import ordering
      - name: Run isort (Check Mode)
        run: poetry run isort --check-only .  # Verify import sorting without modifying files

      # Execute Django test suite
      - name: Run Django Tests
        run: poetry run pytest  # Run tests using pytest framework
