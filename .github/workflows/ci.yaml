name: CI/CD for Django Template

# Trigger workflow on push and pull requests to main branch
on:
  push:
    branches:
      - main  # Run on push to the 'main' branch
  pull_request:
    branches:
      - main  # Run on pull requests targeting the 'main' branch

jobs:
  test:
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
        os: [ubuntu-latest, macOS-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      # Install Docker to macOS and Win
      - name: Install Docker on macOS and Windows
        if: runner.os == 'macOS' || runner.os == 'Windows'
        run: |
          if [ $RUNNER_OS == 'macOS' ]; then
            brew install --cask docker
            open --background -a Docker
            sleep 15
          fi
          if [ $RUNNER_OS == 'Windows' ]; then
            choco install docker-desktop
            start-process "C:\Program Files\Docker\Docker\Docker Desktop.exe"
            sleep 15
          fi
          docker --version  # Verify Docker installation
          docker info       # Check Docker status

      # Clone repository for access to codebase
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configure Python environment with specified version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Set Environment Variables
      - name: Set Environment Variables
        run: |
          echo "DB_ENGINE=django.db.backends.postgresql" >> .env
          echo "DB_NAME=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DB_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env

      # Cache Poetry dependencies for faster builds
      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Set up project dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root

      # Run code quality checks
      - name: Run Pre-commit Hooks
        run: poetry run pre-commit run --all-files

      # Check code formatting
      - name: Run Black (Check Mode)
        run: poetry run black --check .

      # Run code linting
      - name: Run Ruff
        run: poetry run ruff check .

      # Check import ordering
      - name: Run isort (Check Mode)
        run: poetry run isort --check-only .

      # Execute Django test suite
      - name: Run Django Tests
        run: poetry run pytest

    # Define services (PostgreSQL)
    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
